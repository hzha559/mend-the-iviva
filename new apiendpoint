from datetime import datetime

from flask import Flask, jsonify,request

#from flask_httpauth import HTTPBasicAuth
#auth = HTTPBasicAuth()
from flask_apscheduler import APScheduler

import logging,pymssql,uuid
from waitress import serve
app = Flask(__name__)
logging.basicConfig(level=logging.DEBUG)
dbhost = '10'
dbuser = 's'
dbpassword = '0'
dbdatabase = '8'
#table structure
#key1	time1	variable	user
#test1	2022-11-11 14:37:15.000	391f2bc9-ab5d-4bcf-9162-1336dbad8f52	OI
def antiInjection(input1):
    blacklist=['--',' ','=',';','/*','*/']
    for item in blacklist:
        if item in input1:
            return ''
    return input1
    

def auth(user,key):
    query='''select time1 from [1].[dbo].[API] where key1=\'KEY\'
and [user]=\'USER\''''
    query=query.replace('KEY',key)
    query=query.replace('USER',user)
    print(query)
    conn = pymssql.connect(host=dbhost, user=dbuser, password=dbpassword)
    cur = conn.cursor()
    cur.execute(query)
    result = cur.fetchall()
    conn.close()
    result1=[]
    for i in result:
        result1.append(i[0])
    print(result1)
    return result1
             
def update(arg1,arg2):
    query='''update [1].[dbo].[API]
set variable=\'VA\', time1=\'TIME\' where key1=\'KEY\'
'''
    query=query.replace('KEY',arg1)
    query=query.replace('TIME',str(datetime.now())[0:19])
    query=query.replace('VA',arg2)
    print(query)
    conn = pymssql.connect(host=dbhost, user=dbuser, password=dbpassword)
    cur = conn.cursor()
    cur.execute(query)
    conn.commit()
    conn.close()

def auth1(key,user):
    query='''select time1 from [1].[dbo].[API] where variable=\'KEY\'
and [user]=\'USER\''''
    query=query.replace('KEY',key)
    query=query.replace('USER',user)
    conn = pymssql.connect(host=dbhost, user=dbuser, password=dbpassword)
    cur = conn.cursor()
    cur.execute(query)
    result = cur.fetchall()
    conn.close()
    result1=[]
    for i in result:
        result1.append(i)
    if result1!=[]:
        if(datetime.now()-result1[0][0]).seconds>6*60:
            return 0
        else:
            return 1
    else:
        return 2
    
@app.route('/login', methods=['POST'])
def login():
    #print(request.json['key'])
    try:
        lasttime=auth(antiInjection(request.json['user']),antiInjection(request.json['key']))[0]
        #print('here',lasttime)
        if lasttime!='':
            if (datetime.now() - lasttime).seconds>60*6:
                variable=str(uuid.uuid4())
                update(request.json['key'],variable)
                return variable
            else:
                return 'no change in key in less than 6 mins'
        else:
            return 'Wrong Credential'
    except:
        return 'Wrong Credential'

def isvalid(token,user):
    if auth1(antiInjection(token),antiInjection(user))==1:
        return 1
    else:
        return 0
    
@app.route('/allcategories', methods=['POST'])
#no sql injection risk
def category():
    if isvalid(request.json['token'],request.json['username'])==1:
        query='''SELECT 
      [AssetCategoryID]
  FROM [83piriest].[dbo].[AssetCategoryMaster]'''
        conn = pymssql.connect(host=dbhost, user=dbuser, password=dbpassword, database=dbdatabase)
        cur = conn.cursor()
        #print(request.json['asset'])
        #query=query.replace('ASSET',str(request.json['asset'])[1:-1])
        #print(query)
        cur.execute(query)
        result = cur.fetchall()
        conn.close()
        # logging.warning(result)
        result1 = {'categories':[]}
        for i in result:
            result1['categories'].append(i[0])
        return result1
    elif auth1(request.json['token'],request.json['username'])==0:
        return 'Token Timed out'
    else:
        return 'Not Authorized'

#location not available at 83
@app.route('/assets', methods=['POST'])
#no sql injection risk
def assets():
    if isvalid(request.json['token'],request.json['username'])==1:
        query='''SELECT 
      assetid
  FROM [83piriest].[dbo].[AssetCategoryMaster] k
  inner join AssetMaster a on a.AssetCategoryKey=k.AssetCategoryKey
  where assetid like '%ARG1%' and AssetCategoryID like '%ARG2%' '''
        conn = pymssql.connect(host=dbhost, user=dbuser, password=dbpassword, database=dbdatabase)
        cur = conn.cursor()
        #print(request.json['asset'])
        query=query.replace('ARG1',str(request.json['location']))
        query=query.replace('ARG2',str(request.json['assetcategory']))
        #print(query)
        cur.execute(query)
        result = cur.fetchall()
        conn.close()
        # logging.warning(result)
        result1 = {'assets':[]}
        for i in result:
            result1['assets'].append(i[0])
        return result1
    elif auth1(request.json['token'],request.json['username'])==0:
        return 'Token Timed out'
    else:
        return 'Not Authorized'

   
@app.route('/points', methods=['POST'])
def new1():
    if isvalid(request.json['token'],request.json['username'])==1:
        query='''select assetid,pointtemplatename,pointkey from ibmspoints p
        inner join ibmspointtemplates pt on p.pointtemplatekey=pt.pointtemplatekey
        inner join assetmaster am on am.assetkey=p.assetkey
        where assetid in (ASSET) and enabletrend=1
'''
        conn = pymssql.connect(host=dbhost, user=dbuser, password=dbpassword, database=dbdatabase)
        cur = conn.cursor()
        print(request.json['asset'])
        query=query.replace('ASSET',str(request.json['asset'])[1:-1])
        print(query)
        cur.execute(query)
        result = cur.fetchall()
        conn.close()
        # logging.warning(result)
        result1 = {}
        for i in range(len(result)):
            if result[i][0] not in result1:
                result1[result[i][0]]={}
            if result[i][1] not in result1[result[i][0]]:
                result1[result[i][0]][result[i][1]]=[]
            str1='https://83piriestreet.com/IBMSTrend/trend/WTF,2022-10-09,2022-10-11'
            str1=str1.replace('WTF',str(result[i][2]))
            result1[result[i][0]][result[i][1]].append(str1)
        data={'data':result1}
        return data
    elif auth1(request.json['token'],request.json['username'])==0:
        return 'Token Timed out'
    else:
        return 'Not Authorized'

@app.route('/livevalues', methods=['POST'])
def live1():
    if isvalid(request.json['token'],request.json['username'])==1:
        query='''select pointkey,pointvalue,cast(pointvalueupdatedtime at time zone 'UTC' at time zone 'Cen. Australia Standard Time'  as datetime)from ibmspointlastvalues
where pointkey in (ARG)
'''
        conn = pymssql.connect(host=dbhost, user=dbuser, password=dbpassword, database=dbdatabase)
        cur = conn.cursor()
        #print(request.json['asset'])
        query=query.replace('ARG',str(request.json['pointkey']))
        print(query)
        cur.execute(query)
        result = cur.fetchall()
        conn.close()
        # logging.warning(result)
        result1 = {}
        for i in range(len(result)):
            #result1[result[i][0]]=[result[i][1],result[i][2]]
            #str1='https://83piriestreet.com/IBMSTrend/livevalues/WTF'
            #str1=str1.replace('WTF',str(result[i][0]))
            #result1[str(result[i][0])]={}
            print()
            result1[str(result[i][0])]=[result[i][1],str(result[i][2])]
        data={'data':result1}
        return data
    elif auth1(request.json['token'],request.json['username'])==0:
        return 'Token Timed out'
    else:
        return 'Not Authorized'

@app.route('/trend/<pk>,<st>,<en>', methods=['POST'])
def new(pk,st,en):
    if isvalid(request.json['token'],request.json['username'])==1:
        query='''
drop table if exists #temp1

USE [83piriest]
drop table if exists #temp2
declare @key1 varchar(max)='KEY'

--select pointkey         into #temp2 from ibmspoints p
        --inner join ibmspointtemplates pt on p.pointtemplatekey=pt.pointtemplatekey
        --inner join assetmaster am on am.assetkey=p.assetkey
        --where assetid like '%ASSET%'
        --and PointTemplateName like '%ZoneTemp%'

--set @key1= (select STRING_AGG (pointkey, ',') AS column2 FROM #temp2)
CREATE TABLE #temp1
(
   Trendkey INT,
   Pointkey INT,
   PointValue Varchar(max),
   TransactionDateTime datetime
)

declare @from1 datetime2='2022-10-10a 00:00:00'
declare @to1 datetime2='2022-10-11b 00:00:00'

set @from1=@from1 at time zone 'Cen. Australia Standard Time' at time zone 'UTC' 
set @to1=@to1 at time zone 'Cen. Australia Standard Time' at time zone 'UTC'

DECLARE    @return_value int
INSERT #temp1 EXEC    
@return_value = [dbo].[GetTrendData_MultiDB_DBServer]
        @from = @from1,
        @to = @to1,
        @keys = @key1

--select * from #temp1

declare @TimezoneName varchar(max) = 'AUS Eastern Standard Time'
declare @timezoneOffset bigint = Datediff( MINUTE, getdate() at time zone @TimezoneName, getdate() )


select top(100000) assetid,PointTemplateName,pointvalue,CONVERT(VARCHAR(16), transactiondatetime at time zone 'UTC' at time zone 'Cen. Australia Standard Time', 120) as Time1


FROM #temp1 t

inner join ibmspoints p on p.PointKey=t.pointkey
inner join assetmaster am on am.assetkey=p.assetkey
inner join IBMSPointTemplates pt on p.PointTemplateKey=pt.PointTemplateKey
order by assetid, time1 asc
'''
        
        conn = pymssql.connect(host=dbhost, user=dbuser, password=dbpassword, database=dbdatabase)
        cur = conn.cursor()
        #query=query.replace('ASSET',asset)
        query=query.replace('KEY',pk)
        query = query.replace('2022-10-10a',st)
        query = query.replace('2022-10-11b',en)
        #print(query)
        cur.execute(query)
        result = cur.fetchall()
        conn.close()
        # logging.warning(result)
        result1 = {}
        nbr=len(result)
        print(nbr)
        if nbr>=100000:
            return {'error': 'maximum data 100,000 rows can be fetched in one query'}
        for i in range(len(result)):
            if result[i][0] not in result1:
                result1[result[i][0]]={}
            if result[i][1] not in result1[result[i][0]]:
                result1[result[i][0]][result[i][1]]={}
            if 'data' not in result1[result[i][0]][result[i][1]]:
                result1[result[i][0]][result[i][1]]['data']=[]
            if 'date' not in result1[result[i][0]][result[i][1]]:
                result1[result[i][0]][result[i][1]]['date']=[]
                
            result1[result[i][0]][result[i][1]]['data'].append(str(result[i][2]))
            result1[result[i][0]][result[i][1]]['date'].append(str(result[i][3]))
        data={'data':result1}
        return data
    elif auth1(request.json['token'],request.json['username'])==0:
        return 'Token Timed out'
    else:
        return 'Not Authorized'

if __name__ == '__main__':
    #serve(app, host='0.0.0.0', port=5001)
    app.run( host='10.35.10.104',port=5005)
